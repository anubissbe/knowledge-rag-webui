name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'knowledge-rag-webui'

jobs:
  # Job 1: Code Quality and Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('package-lock.json') }}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('package-lock.json') }}-
            ${{ env.CACHE_KEY_PREFIX }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run ESLint
        run: npm run lint -- --max-warnings 200

      - name: TypeScript type checking
        run: npx tsc --noEmit

      - name: Check for security vulnerabilities
        run: npm audit --audit-level=high

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Validate package.json and package-lock.json
        run: |
          npm ls --depth=0
          test -f package-lock.json

  # Job 2: Build and Test
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ needs.quality.outputs.cache-key }}

      - name: Install dependencies (if cache miss)
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build

      - name: Check build output
        run: |
          test -d dist
          test -f dist/index.html
          ls -la dist/

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: build-${{ github.sha }}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Start preview server for E2E tests
        run: |
          npm run preview &
          npx wait-on http://localhost:4173 --timeout 60000

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-${{ github.run_number }}
          path: playwright-report/
          retention-days: 7

      - name: Upload test results to summary
        if: always()
        run: |
          if [ -f playwright-report/index.html ]; then
            echo "## 🎭 E2E Test Results" >> $GITHUB_STEP_SUMMARY
            echo "E2E tests completed. Check artifacts for detailed report." >> $GITHUB_STEP_SUMMARY
          fi

  # Job 3: Performance and Accessibility Testing
  performance:
    name: Performance & Accessibility
    runs-on: ubuntu-latest
    needs: [quality, build-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: dist
          key: build-${{ github.sha }}

      - name: Install Lighthouse CLI
        run: npm install -g @lhci/cli@0.12.x

      - name: Start preview server
        run: |
          npx serve dist -p 4173 &
          npx wait-on http://localhost:4173 --timeout 60000

      - name: Run Lighthouse CI
        run: |
          lhci autorun --config=.lighthouserc.json || true

      - name: Create performance summary
        run: |
          echo "## ⚡ Performance Analysis" >> $GITHUB_STEP_SUMMARY
          echo "Lighthouse performance analysis completed for main branch." >> $GITHUB_STEP_SUMMARY

  # Job 4: Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 5: Deployment Preview (for PRs)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [quality, build-test]
    if: github.event_name == 'pull_request'
    environment: preview
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: dist
          key: build-${{ github.sha }}

      - name: Deploy to Preview Environment
        run: |
          echo "🚀 Deploying to preview environment..."
          echo "Preview URL would be: https://preview-${{ github.event.number }}.knowledge-rag-webui.dev"
          echo "## 🔍 Preview Deployment" >> $GITHUB_STEP_SUMMARY
          echo "Preview environment deployed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "Preview URL: https://preview-${{ github.event.number }}.knowledge-rag-webui.dev" >> $GITHUB_STEP_SUMMARY

  # Job 6: Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, build-test, performance, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: dist
          key: build-${{ github.sha }}

      - name: Deploy to Production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "Production URL: https://knowledge-rag-webui.dev"
          echo "## 🌟 Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "Application deployed to production successfully!" >> $GITHUB_STEP_SUMMARY
          echo "Production URL: https://knowledge-rag-webui.dev" >> $GITHUB_STEP_SUMMARY

      - name: Create deployment notification
        run: |
          echo "Deployment completed at $(date)" > deployment-info.txt
          echo "Commit: ${{ github.sha }}" >> deployment-info.txt
          echo "Branch: ${{ github.ref_name }}" >> deployment-info.txt

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info-${{ github.run_number }}
          path: deployment-info.txt
          retention-days: 30

  # Job 7: Notification and Cleanup
  notify:
    name: Notify & Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-preview]
    if: always() && (needs.deploy-production.result != 'skipped' || needs.deploy-preview.result != 'skipped')
    
    steps:
      - name: Workflow Summary
        run: |
          echo "## 🎉 Workflow Completed" >> $GITHUB_STEP_SUMMARY
          echo "All pipeline stages completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code quality checks passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Build and tests successful" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security scanning completed" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "- ✅ Production deployment successful" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.deploy-preview.result }}" = "success" ]; then
            echo "- ✅ Preview deployment successful" >> $GITHUB_STEP_SUMMARY
          fi