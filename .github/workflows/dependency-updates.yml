name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  dependency-review:
    name: Review Dependencies
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Check for security vulnerabilities
        id: audit
        run: |
          npm audit --audit-level=moderate --json > audit-results.json || true
          VULN_COUNT=$(cat audit-results.json | jq '.metadata.vulnerabilities.total // 0')
          echo "vulnerability-count=$VULN_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "## 🚨 Security Vulnerabilities Found" >> $GITHUB_STEP_SUMMARY
            echo "Found $VULN_COUNT vulnerabilities. Please review and update dependencies." >> $GITHUB_STEP_SUMMARY
            npm audit --audit-level=moderate
          else
            echo "## ✅ No Security Vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "All dependencies are secure." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for outdated dependencies
        id: outdated
        run: |
          npm outdated --json > outdated-results.json || true
          OUTDATED_COUNT=$(cat outdated-results.json | jq 'keys | length')
          echo "outdated-count=$OUTDATED_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$OUTDATED_COUNT" -gt 0 ]; then
            echo "## 📦 Outdated Dependencies" >> $GITHUB_STEP_SUMMARY
            echo "Found $OUTDATED_COUNT outdated dependencies:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            npm outdated >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ All Dependencies Up to Date" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create issue for vulnerabilities
        if: steps.audit.outputs.vulnerability-count > 0
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Security vulnerabilities found - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Vulnerabilities Detected
            
            Our automated dependency scan found **${{ steps.audit.outputs.vulnerability-count }}** security vulnerabilities.
            
            ### Action Required
            - [ ] Review the vulnerabilities listed below
            - [ ] Update affected dependencies to secure versions
            - [ ] Test the application after updates
            - [ ] Close this issue once resolved
            
            ### Scan Results
            \`\`\`
            Run \`npm audit\` locally to see detailed vulnerability information.
            \`\`\`
            
            ### Automated Scan Info
            - **Date**: ${new Date().toISOString()}
            - **Workflow**: ${{ github.workflow }}
            - **Run**: ${{ github.run_number }}
            
            > This issue was automatically created by our dependency monitoring workflow.
            `;
            
            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,dependencies'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Security vulnerabilities found')
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'dependencies', 'automated']
              });
            }

  update-dependencies:
    name: Update Dependencies
    runs-on: self-hosted
    needs: dependency-review
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Update patch and minor versions
        run: |
          ncu -u --target minor
          npm install

      - name: Run tests after updates
        run: |
          npm run build
          npm run lint
          npx tsc --noEmit

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(deps): update dependencies to latest minor/patch versions"
          title: "🔄 Automated dependency updates"
          body: |
            ## Automated Dependency Updates
            
            This PR contains automated updates to minor and patch versions of dependencies.
            
            ### Changes
            - Updated dependencies to latest compatible versions
            - Maintained major version compatibility
            - All tests and builds pass
            
            ### Verification
            - ✅ TypeScript compilation successful
            - ✅ ESLint checks passed
            - ✅ Build process completed
            
            ### Review Checklist
            - [ ] Review the dependency changes
            - [ ] Verify application functionality
            - [ ] Check for any breaking changes in changelogs
            - [ ] Merge if all checks pass
            
            > This PR was automatically created by the dependency update workflow.
          labels: |
            dependencies
            automated
            maintenance
          branch: chore/automated-dependency-updates
          delete-branch: true